.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "DATASEXTA 1"
.TH DATASEXTA 1 "2013-07-22" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NOMBRE"
.IX Header "NOMBRE"
\&\fBDownVideos::DataSexta\fR \- Un módulo para obtener rutas a los capítulos de los programas de La Sexta
.SH "SINOPSIS"
.IX Header "SINOPSIS"
use DownVideos::DataSexta
.PP
my \f(CW$sexta\fR =  DataSexta\->\fInew()\fR;
.PP
my \f(CW$series\fR = \f(CW$sexta\fR\->get_series;
.PP
for my \f(CW$p\fR (@$series)
  {
  for my \f(CW$k\fR (keys \f(CW$p\fR)
    {
    print \*(L"$k\en\*(R";
    }
 }
.PP
my \f(CW$capitulos\fR = \f(CW$sexta\fR\->get_capitulos(\*(L"$nombre_serie\*(R");
.SH "DESCRIPCIÓN"
.IX Header "DESCRIPCIÓN"
Un módulo para obtener rutas a los capítulos de los programas de \fBLa Sexta\fR, que junto con \fBDownVideos::SextaXML\fR proporciona la \s-1URL\s0 de los archivos de video tanto de sus series, como de sus noticieros y programas.
.SH "MÉTODOS"
.IX Header "MÉTODOS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$sexta\fB = DataSexta\->\f(BInew()\fB;\fR" 4
.el .IP "\fB\f(CB$sexta\fB = DataSexta\->\f(BInew()\fB;\fR" 4
.IX Item "$sexta = DataSexta->new();"
.RE
.RS 4
.PD
.Sp
.RS 4
Crea el objeto. No requiere opciones.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$sexta\fR (Objeto DataSexta=HASH)
.RE
.RS 4
.RE
.SS "\s-1ACCESORES\s0"
.IX Subsection "ACCESORES"
.IP "\fIget_series()\fR" 4
.IX Item "get_series()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$series\fB = \f(BI$sexta\fB\->\f(BIget_series()\fB;\fR" 4
.el .IP "\fB\f(CB$series\fB = \f(CB$sexta\fB\->\f(BIget_series()\fB;\fR" 4
.IX Item "$series = $sexta->get_series();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene un listado de las series y la \s-1URL\s0 a los capítulos. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$series\fR (Array de hashes)
.RE
.RS 4
.Sp
.Vb 8
\&    $series = [
\&            {
\&              \*(AqSerie foo\*(Aq => \*(Aq/videos/sfoo.html\*(Aq
\&            },
\&            {
\&              \*(AqSerie bar\*(Aq => \*(Aq/videos/sbar.html\*(Aq
\&            }
\&          ];
.Ve
.RE
.RS 4
.RE
.IP "\fIget_programas()\fR" 4
.IX Item "get_programas()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$programas\fB = \f(BI$sexta\fB\->\f(BIget_series()\fB;\fR" 4
.el .IP "\fB\f(CB$programas\fB = \f(CB$sexta\fB\->\f(BIget_series()\fB;\fR" 4
.IX Item "$programas = $sexta->get_series();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene un listado de los programas y la \s-1URL\s0 a los capítulos. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$programas\fR (Array de hashes)
.RE
.RS 4
.Sp
.Vb 8
\&    $programas = [
\&               {
\&                 \*(AqPrograma foo\*(Aq => \*(Aq/videos/pfoo.html\*(Aq
\&               },
\&               {
\&                 \*(AqPrograma bar\*(Aq => \*(Aq/videos/pbar.html\*(Aq
\&               }
\&             ];
.Ve
.RE
.RS 4
.RE
.IP "\fIget_noticias()\fR" 4
.IX Item "get_noticias()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$noticias\fB = \f(BI$sexta\fB\->\f(BIget_noticias()\fB;\fR" 4
.el .IP "\fB\f(CB$noticias\fB = \f(CB$sexta\fB\->\f(BIget_noticias()\fB;\fR" 4
.IX Item "$noticias = $sexta->get_noticias();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene un listado de los noticieros y la \s-1URL\s0 a los capítulos. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$noticias\fR (Array de hashes)
.RE
.RS 4
.RE
.RS 4
.RE
.IP "\fIget_capitulos()\fR" 4
.IX Item "get_capitulos()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$capitulos\fB = \f(BI$sexta\fB\->get_capitulos($nombre);\fR" 4
.el .IP "\fB\f(CB$capitulos\fB = \f(CB$sexta\fB\->get_capitulos($nombre);\fR" 4
.IX Item "$capitulos = $sexta->get_capitulos($nombre);"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene un hash con información acerca de todos los capitulos del título (la clave de \f(CW$series\fR, \f(CW$programas\fR o \f(CW$noticias\fR) de la serie, el programa o el noticiero indicado en \f(CW$nombre\fR.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$nombre\fR (Cadena de texto)
.IP "\(bu" 4
\&\f(CW$capitulos\fR (Array de hashes)
.RE
.RS 4
.Sp
.Vb 10
\&    $capitulos = [
\&               {
\&                 \*(AqURL\*(Aq => \*(Aqhttp://www.lasexta.com/videos/seriefoo/temporada\-2/capitulo\-2.html\*(Aq,
\&                 \*(AqDESCRIPCION\*(Aq => "Capítulo 2",
\&                 \*(AqTITULO\*(Aq => "Serie foo \- Capítulo 2 \- Temporada 1",
\&                 \*(AqIMAGEN\*(Aq => \*(Aqhttp://www.lasexta.com/clipping/2013/05/02/00047/10.jpg\*(Aq
\&               },
\&               {
\&                 \*(AqURL\*(Aq => \*(Aqhttp://www.lasexta.com/videos/seriefoo/temporada\-2/capitulo\-1.html\*(Aq,
\&                 \*(AqDESCRIPCION\*(Aq => "Capítulo 1",
\&                 \*(AqTITULO\*(Aq => "Serie foo \- Capítulo 1 \- Temporada 1",
\&                 \*(AqIMAGEN\*(Aq => \*(Aqhttp://www.lasexta.com/clipping/2013/04/25/00069/10.jpg\*(Aq
\&               }
\&             ];
.Ve
.RE
.RS 4
.RE
.SH "EJEMPLO"
.IX Header "EJEMPLO"
.IP "Ejemplo de obtención de información sobre tres capítulos del noticiero Deportes:" 4
.IX Item "Ejemplo de obtención de información sobre tres capítulos del noticiero Deportes:"
.Vb 1
\& #!/usr/bin/perl
\&
\& use warnings;
\& use strict;
\& use utf8;
\& use encoding \*(Aqutf8\*(Aq;
\& use open \*(Aqlocale\*(Aq;
\& use Encode;
\& use DataSexta;
\&
\& my $sexta = DataSexta\->new();
\& my $noticias = $sexta\->get_noticias;
\& 
\& print "Obtenemos los programas de la sección noticias\en";
\&
\& for my $p (0..@$noticias \- 1)
\&    {
\&        for my $k (keys @$noticias[$p])
\&            {
\&            print "Título $p: $k\en";
\&            print "URL $p: " . @{$noticias}[$p]\->{$k} . "\en\en";
\&            }
\&    }
\&
\& # Obtenemos los capítulos del noticiero "Deportes";
\& my $capitulos = $sexta\->get_capitulos("Deportes");
\&
\& print "Mostramos información de los 3 últimos capítulos\en";
\&
\& for my $c (0..2)
\&    {
\&        for my $k (keys @$capitulos[$c])
\&            {
\&            print "($c) $k:";
\&            print " " . @{$capitulos}[$c]\->{$k} . "\en";
\&            }
\&    print "\en";
\&    }
.Ve
.SH "AUTOR"
.IX Header "AUTOR"
Hugo Morago Martín <morago@ono.com>
.SH "LICENCIA"
.IX Header "LICENCIA"
Copyright © 2013 Hugo Morago Martín <morago@ono.com>
.PP
Este programa se distribuye bajo los términos de la \s-1GPL\s0 v3 del 29 de enero de 2007. Puede encontrar una copia de la misma en http://www.gnu.org/licenses/gpl\-3.0.html
