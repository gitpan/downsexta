.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "SEXTAXML 1"
.TH SEXTAXML 1 "2013-07-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NOMBRE"
.IX Header "NOMBRE"
\&\fBDownVideos::SextaXML\fR \- Un módulo para obtener rutas a los vídeos de los programas de La Sexta
.SH "SINOPSIS"
.IX Header "SINOPSIS"
.Vb 1
\& use DownVideos::SextaXML
\&
\& my $xml = SextaXML\->new(URL => $$capitulos[0]\->{URL});
\&
\& print "\en\en\enObteniendo datos del primer capítulo de Tiempo:\en\en";
\&
\& print "\etNombre:\et\et" . $xml\->nombre . "\en";
\& print "\etSección:\et" . $xml\->seccion . "\en";
\& print "\etInfo:\et\et" . $xml\->info . "\en";
\& print "\etDescripción:\et" . $xml\->descripcion . "\en";
\& print "\etImagen:\et\et" . $xml\->imagen . "\en";
\& print "\etVídeo:\et\et" . $xml\->video . "\en";
\& print "\etRTMP:\et\et" . $xml\->rtmp . "\en";
\& print "\etTipo:\et\et" . $xml\->mime . "\en";
\& print "\etTamaño:\et\et" . $xml\->tamanyo . " Megas\en\en\e
.Ve
.SH "DESCRIPCIÓN"
.IX Header "DESCRIPCIÓN"
Un módulo para obtener rutas a los vídeos de capítulos concretos de programas de \fBLa Sexta\fR. Además proporciona información sobre el nombre, la sección, la descripción, el tipo mime y el tamaño del vídeo.
.SH "MÉTODOS"
.IX Header "MÉTODOS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$xml\fB = DataSexta\->new( \s-1URL\s0 => \f(BI$url_del_capitulo\fB );\fR" 4
.el .IP "\fB\f(CB$xml\fB = DataSexta\->new( \s-1URL\s0 => \f(CB$url_del_capitulo\fB );\fR" 4
.IX Item "$xml = DataSexta->new( URL => $url_del_capitulo );"
.RE
.RS 4
.PD
.Sp
.RS 4
Crea el objeto. El argumento es un par clave-valor en el que la clave debe ser \*(L"\s-1URL\s0\*(R" y el valor la ruta a la página que contiene el reproductor de vídeo. Este argumento puede obtenerse de un modo sencillo mediante el módulo \fBDownVideos::DataSexta\fR.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$sexta\fR (Objeto SextaXML=HASH)
.RE
.RS 4
.RE
.SS "\s-1ACCESORES\s0"
.IX Subsection "ACCESORES"
.IP "\fInombre()\fR" 4
.IX Item "nombre()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$nombre\fB = \f(BI$xml\fB\->\f(BInombre()\fB;\fR" 4
.el .IP "\fB\f(CB$nombre\fB = \f(CB$xml\fB\->\f(BInombre()\fB;\fR" 4
.IX Item "$nombre = $xml->nombre();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene el nombre o título del programa, serie o noticiero. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$nombre\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $nombre = "Capítulo 19"
.Ve
.RE
.RS 4
.RE
.IP "\fIseccion()\fR" 4
.IX Item "seccion()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$seccion\fB = \f(BI$xml\fB\->\f(BIseccion()\fB;\fR" 4
.el .IP "\fB\f(CB$seccion\fB = \f(CB$xml\fB\->\f(BIseccion()\fB;\fR" 4
.IX Item "$seccion = $xml->seccion();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene el nombre propio del programa. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$seccion\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $seccion = "Buena gente"
.Ve
.RE
.RS 4
.RE
.IP "\fIinfo()\fR" 4
.IX Item "info()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$info\fB = \f(BI$xml\fB\->\f(BIinfo()\fB;\fR" 4
.el .IP "\fB\f(CB$info\fB = \f(CB$xml\fB\->\f(BIinfo()\fB;\fR" 4
.IX Item "$info = $xml->info();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene información acerca del capítulo concreto. No requiere argumentos.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$info\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $info = "Capítulo 19 Temporada: 1"
.Ve
.RE
.RS 4
.RE
.IP "\fIdescripcion()\fR" 4
.IX Item "descripcion()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$descripcion\fB = \f(BI$xml\fB\->\f(BIdescripcion()\fB;\fR" 4
.el .IP "\fB\f(CB$descripcion\fB = \f(CB$xml\fB\->\f(BIdescripcion()\fB;\fR" 4
.IX Item "$descripcion = $xml->descripcion();"
.RE
.RS 4
.PD
.Sp
.RS 4
Generalmente obtiene una descripcion del contenido del capítulo o información acerca del mismo.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$descripcion\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $descripcion = "Ana consigue el papel de su vida y decide irse a Miami"
.Ve
.RE
.RS 4
.RE
.IP "\fIimagen()\fR" 4
.IX Item "imagen()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$imagen\fB = \f(BI$xml\fB\->\f(BIimagen()\fB;\fR" 4
.el .IP "\fB\f(CB$imagen\fB = \f(CB$xml\fB\->\f(BIimagen()\fB;\fR" 4
.IX Item "$imagen = $xml->imagen();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene la \s-1URL\s0 a una imágen del capítulo.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$imagen\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $imagen = "http://www.lasexta.com/clipping/2013/07/17/00555/30.jpg"
.Ve
.RE
.RS 4
.RE
.IP "\fIrtpm()\fR" 4
.IX Item "rtpm()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$rtpm\fB = \f(BI$xml\fB\->\f(BIrtpm()\fB;\fR" 4
.el .IP "\fB\f(CB$rtpm\fB = \f(CB$xml\fB\->\f(BIrtpm()\fB;\fR" 4
.IX Item "$rtpm = $xml->rtpm();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene la dirección rtpm para ver el vídeo con un reproductor.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$rtpm\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $rtpm = "rtmp://a3\-lasextafs.fplive.net/a3\-lasexta/mp_seriesh3/2013/07/17/00005/000.f4v"
.Ve
.RE
.RS 4
.RE
.IP "\fItipo()\fR" 4
.IX Item "tipo()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$tipo\fB = \f(BI$xml\fB\->\f(BItipo()\fB;\fR" 4
.el .IP "\fB\f(CB$tipo\fB = \f(CB$xml\fB\->\f(BItipo()\fB;\fR" 4
.IX Item "$tipo = $xml->tipo();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene el tipo \s-1MIME\s0 del fichero de vídeo.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$tipo\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $tipo = "video/mp4"
.Ve
.RE
.RS 4
.RE
.IP "\fItamanyo()\fR" 4
.IX Item "tamanyo()"
.RS 4
.PD 0
.ie n .IP "\fB\fB$tamanyo\fB = \f(BI$xml\fB\->\f(BItamanyo()\fB;\fR" 4
.el .IP "\fB\f(CB$tamanyo\fB = \f(CB$xml\fB\->\f(BItamanyo()\fB;\fR" 4
.IX Item "$tamanyo = $xml->tamanyo();"
.RE
.RS 4
.PD
.Sp
.RS 4
Obtiene el tamaño en megas del fichero de vídeo.
.RE
.RE
.RS 4
.IP "\(bu" 4
\&\f(CW$tamanyo\fR (Cadena de texto)
.RE
.RS 4
.Sp
.Vb 1
\&    $tamanyo = "629.76"
.Ve
.RE
.RS 4
.RE
.SH "EJEMPLO"
.IX Header "EJEMPLO"
.IP "Obtención de información y enlaces a los vídeos de un capítulo de una serie:" 4
.IX Item "Obtención de información y enlaces a los vídeos de un capítulo de una serie:"
.Vb 1
\& #!/usr/bin/perl
\&
\& use warnings;
\& use strict;
\& use utf8;
\& use encoding \*(Aqutf8\*(Aq;
\& use open \*(Aqlocale\*(Aq;
\& use Encode;
\& use DownVideos::DataSexta;
\& use DownVideos::SextaXML;
\&
\& my $sexta = DataSexta\->new();
\&
\& my $series = $sexta\->get_series;
\&
\& print "Programas de series:\en\en";
\& for my $p (@$series)
\&   {
\&   for my $k (keys $p)
\&     {
\&     print "\et$k\en";
\&     }
\&   }
\&
\& my $capitulos = $sexta\->get_capitulos("Buena gente");
\&
\& my $xml = SextaXML\->new(URL => $$capitulos[0]\->{URL});
\&
\& print "\en\en\enObteniendo datos del primer capítulo de Buena gente:\en\en";
\&
\& print "\etNombre:\et\et" . $xml\->nombre . "\en";
\& print "\etSección:\et" . $xml\->seccion . "\en";
\& print "\etInfo:\et\et" . $xml\->info . "\en";
\& print "\etDescripción:\et" . $xml\->descripcion . "\en";
\& print "\etImagen:\et\et" . $xml\->imagen . "\en";
\& print "\etVideo:\et\et" . $xml\->video . "\en";
\& print "\etRTMP:\et\et" . $xml\->rtmp . "\en";
\& print "\etTipo:\et\et" . $xml\->mime . "\en";
\& print "\etTamaño:\et\et" . $xml\->tamanyo . " Megas\en\en\en";
.Ve
.SH "AUTOR"
.IX Header "AUTOR"
Hugo Morago Martín <morago@ono.com>
.SH "LICENCIA"
.IX Header "LICENCIA"
Copyright © 2013 Hugo Morago Martín <morago@ono.com>
.PP
Este programa se distribuye bajo los términos de la \s-1GPL\s0 v3 del 29 de enero de 2007. Puede encontrar una copia de la misma en http://www.gnu.org/licenses/gpl\-3.0.html
